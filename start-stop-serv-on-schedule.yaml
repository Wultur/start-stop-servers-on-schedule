AWSTemplateFormatVersion: '2010-09-09'
Description: >
    This template is used to create EventBridge Schedules
    to start and stop servers with custom tag at exactly time.
    Created by Pavel Malchauskas 20.12.2022

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Resource Configuration"
        Parameters:
          - TagKey
          - TagValue
          - RegionEC2
          - StartHour
          - StartMinutes
          - StopHour
          - StopMinutes
          - DaysToStartStop
    ParameterLabels:
      TagKey:
        default: "Tag Key of instances to start/stop."
      TagValue:
        default: "Tag Value of instances to start/stop."
      RegionEC2:
        default: "Region for start/stop instances."
      StartHour:
        default: "Start servers hour."
      StartMinutes:
        default: "Start servers minutes."
      StopHour:
        default: "Stop servers hour."
      StopMinutes:
        default: "Stop servers minutes."
      DaysToStartStop:
        default: "Days to start/stop servers (1-3 or 1,2,3,6 | 1 - is Sunday)"

Parameters:
  TagKey:
    Type: String
    Default: "startstop"
  TagValue:
    Type: String
    Default: "enabled"
  RegionEC2:
    Type: String
    Default: "eu-north-1"
  StartHour:
    Type: String
    Default: "8"
  StartMinutes:
    Type: String
    Default: "00"
  StopHour:
    Type: String
    Default: "17"
  StopMinutes:
    Type: String
    Default: "00"
  DaysToStartStop:
    Type: String
    Default: "2-6"

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  LambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    DeletionPolicy: Delete
    Properties:
      PolicyDocument: !Sub
        - |
          {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Action": "logs:CreateLogGroup",
                      "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                      ],
                      "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-start-stop-servers-lambda:*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "ec2:StartInstances",
                          "ec2:StopInstances"
                      ],
                      "Resource": "arn:aws:ec2:${region}:${AWS::AccountId}:instance/*",
                      "Condition": {
                          "StringEquals": {
                              "aws:ResourceTag/${key}": "${value}"
                          }
                      }
                  },
                  {
                      "Effect": "Allow",
                      "Action": "ec2:DescribeInstances",
                      "Resource": "*"
                  }
              ]
          }
        - key: !Ref TagKey
          value: !Ref TagValue
          region: !Ref RegionEC2
      Roles:
        - Ref: LambdaRole

  LambdaStartStop:
    Type: AWS::Lambda::Function
    DeletionPolicy: Delete
    Properties:
      Code:
        ZipFile: !Sub
          - |
            import boto3


            def lambda_handler(event, context):
    
                action_with_servers = event["ActionWithServers"]
     
                ec2_client = boto3.client("ec2", region_name="${region}")
                reservations = ec2_client.describe_instances(Filters=[
                    {
                        "Name": "tag:${key}",
                        "Values": ["${value}"],
                    }
                ]).get("Reservations")
    
                instances =[]
    
                for reservation in reservations:
                    for instance in reservation["Instances"]:
                        instances.append(instance["InstanceId"])

                if action_with_servers == "start":
                    ec2_client.start_instances(InstanceIds=instances)
                elif action_with_servers == "stop":
                    ec2_client.stop_instances(InstanceIds=instances)
          - key: !Ref TagKey
            value: !Ref TagValue
            region: !Ref RegionEC2
      Description: Lambda to start/stop servers on schedule
      FunctionName: !Sub ${AWS::StackName}-start-stop-servers-lambda
      Handler: index.lambda_handler
      Runtime: python3.9
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn

  EventBridgeStartRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      AssumeRolePolicyDocument: !Sub
        - |
          {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Principal": {
                          "Service": "scheduler.amazonaws.com"
                      },
                      "Action": "sts:AssumeRole",
                      "Condition": {
                          "StringEquals": {
                              "aws:SourceAccount": "${AWS::AccountId}",
                              "aws:SourceArn": "arn:aws:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/default/${AWS::StackName}-start-server-with-tag-${tag}"
                          }
                      }
                  }
              ]
          }
        - tag: !Ref TagKey

  EventBridgeStopRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      AssumeRolePolicyDocument: !Sub
        - |
          {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Principal": {
                          "Service": "scheduler.amazonaws.com"
                      },
                      "Action": "sts:AssumeRole",
                      "Condition": {
                          "StringEquals": {
                              "aws:SourceAccount": "${AWS::AccountId}",
                              "aws:SourceArn": "arn:aws:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/default/${AWS::StackName}-stop-server-with-tag-${tag}"
                          }
                      }
                  }
              ]
          }
        - tag: !Ref TagKey

  EventBridgePolicy:
    Type: AWS::IAM::ManagedPolicy
    DeletionPolicy: Delete
    Properties:
      PolicyDocument: !Sub
        - |
          {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Action": [
                          "lambda:InvokeFunction"
                      ],
                      "Resource": [
                          "${lambdaArn}:*",
                          "${lambdaArn}"
                      ]
                  }
              ]
          }
        - lambdaArn: !GetAtt LambdaStartStop.Arn
      Roles:
        - Ref: EventBridgeStartRole
        - Ref: EventBridgeStopRole

  EventBridgeStartServers:
    Type: AWS::Scheduler::Schedule
    Properties:
      Description: "Star servers with custom tag"
      FlexibleTimeWindow: 
        Mode: "OFF"
      Name: !Sub
        - "${AWS::StackName}-start-server-with-tag-${tag}"
        - tag: !Ref TagKey
      ScheduleExpression: !Sub
        - "cron(${minutes} ${hour} ? * ${days} *)"
        - minutes: !Ref StartMinutes
          hour: !Ref StartHour
          days: !Ref DaysToStartStop
      Target: 
        Arn: !GetAtt LambdaStartStop.Arn
        Input: '{ "ActionWithServers" : "start" }'
        RoleArn: !GetAtt EventBridgeStartRole.Arn

  EventBridgeStopServers:
    Type: AWS::Scheduler::Schedule
    Properties:
      Description: "Star servers with custom tag"
      FlexibleTimeWindow: 
        Mode: "OFF"
      Name: !Sub
        - "${AWS::StackName}-stop-server-with-tag-${tag}"
        - tag: !Ref TagKey
      ScheduleExpression: !Sub
        - "cron(${minutes} ${hour} ? * ${days} *)"
        - minutes: !Ref StopMinutes
          hour: !Ref StopHour
          days: !Ref DaysToStartStop
      Target: 
        Arn: !GetAtt LambdaStartStop.Arn
        Input: '{ "ActionWithServers" : "stop" }'
        RoleArn: !GetAtt EventBridgeStopRole.Arn
